{"version":3,"sources":["logo.svg","components/Page1.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Page1","onRouteChange","className","src","logo","alt","onClick","Page2","React","lazy","Page3","App","route","setState","state","this","fallback","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yGAAAA,EAAOC,QAAU,IAA0B,kC,wLCmB5BC,EAhBD,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cACb,OACG,6BACG,4BAAQC,UAAU,iBACf,yBAAKC,IAAKC,IAAMF,UAAU,kCAAkCG,IAAI,WAC7D,wBAAIH,UAAU,yBAAd,kBACA,wBAAIA,UAAU,2BAAd,WAEN,yBAAKA,UAAU,UACZ,4BAAQA,UAAU,oDAAoDI,QAAS,kBAAML,EAAc,WAAnG,SACA,4BAAQC,UAAU,oDAAoDI,QAAS,kBAAML,EAAc,WAAnG,YCTNM,EAAQC,IAAMC,MAAK,kBAAM,gCACzBC,EAAQF,IAAMC,MAAK,kBAAM,gCAiChBE,E,YA9BZ,aAAe,IAAD,8BACX,+CAMHV,cAAgB,SAACW,GACd,EAAKC,SAAS,CAAED,MAAOA,KANvB,EAAKE,MAAQ,CACVF,MAAO,SAHC,E,sEAYX,MAAyB,UAArBG,KAAKD,MAAMF,MACL,kBAAC,EAAD,CAAOX,cAAec,KAAKd,gBACL,UAArBc,KAAKD,MAAMF,MAEhB,kBAAC,WAAD,CAAUI,SAAU,4CACjB,kBAACT,EAAD,CAAON,cAAec,KAAKd,iBAGJ,UAArBc,KAAKD,MAAMF,MAEhB,kBAAC,WAAD,CAAUI,SAAU,4CACjB,kBAACN,EAAD,CAAOT,cAAec,KAAKd,sBAH7B,M,GArBKgB,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.d822dd38.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport logo from '../logo.svg';\n\nconst Page1 = ({onRouteChange}) => {\n   return (\n      <div>\n         <header className=\"tc pv4 pv5-ns\">\n            <img src={logo} className=\"br-100 pa1 ba b--black-10 h3 w3\" alt=\"avatar\" />\n               <h1 className=\"f5 f4-ns fw6 mid-gray\">Code Splitting</h1>\n               <h2 className=\"f6 gray fw2 ttu tracked\">Page 1</h2>\n         </header>\n         <div className='tc ph3'>\n            <button className='f6 link dim br2 ph3 pv2 mb2 dib white bg-mid-gray' onClick={() => onRouteChange('page2')}>Page2</button>\n            <button className='f6 link dim br2 ph3 pv2 mb2 dib white bg-mid-gray' onClick={() => onRouteChange('page3')}>Page3</button>\n         </div>\n      </div>\n   )\n}\n\nexport default Page1;","import React, {Component, Suspense} from 'react';\nimport './App.css';\n\nimport Page1 from './components/Page1';\nconst Page2 = React.lazy(() => import('./components/Page2'));\nconst Page3 = React.lazy(() => import('./components/Page3'));\n\nclass App extends Component {\n   constructor() {\n      super();\n      this.state = {\n         route: 'page1',\n      }\n   }\n\n   onRouteChange = (route) => {\n      this.setState({ route: route });\n   }\n\n   render() {\n      if (this.state.route === 'page1') {\n         return <Page1 onRouteChange={this.onRouteChange} />\n      } else if (this.state.route === 'page2') {\n         return (\n            <Suspense fallback={<div>Loading...</div>}>\n               <Page2 onRouteChange={this.onRouteChange} />\n            </Suspense>\n         );\n      } else if (this.state.route === 'page3') {\n         return (\n            <Suspense fallback={<div>Loading...</div>}>\n               <Page3 onRouteChange={this.onRouteChange} />\n            </Suspense>\n         );\n      }\n   }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}